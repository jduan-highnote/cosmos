plugins {
    // run "./gradlew dokka" to generate HTML docs
    id "org.jetbrains.dokka" version "0.9.17"
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}

apply plugin: 'scala'
apply plugin: 'application'

// Note that the Kotlin compiler will create a class based on the "main" function.
// So if the filename that contains the "main" func is called HelloWorld.kt,
// the class will be named "HelloWorldKt".
// See https://discuss.kotlinlang.org/t/no-class-just-fun-main/5147
mainClassName = 'jduan.main.MainKt'

defaultTasks 'run'

repositories {
    mavenCentral()
}

dependencies {
    pmd project(':projects:pmd_rules')

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

    implementation 'javax.validation:validation-api:2.0.0.Final'

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
//    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.1.1'
    compile 'org.kohsuke:github-api:1.95'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.10.0'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.10.0'
    compile 'com.squareup.okhttp3:okhttp:3.11.0'
    compile 'com.squareup.okhttp3:okhttp-sse:3.11.0'
    compile 'io.reactivex.rxjava2:rxjava:2.2.0'
    compile 'org.eclipse.jgit:org.eclipse.jgit:5.8.0.202006091008-r'
    compile 'org.ocpsoft.prettytime:prettytime:4.0.1.Final'
    implementation 'org.xerial:sqlite-jdbc:3.32.3.2'
    implementation 'com.github.javaparser:javaparser-core:3.16.1'
    implementation 'com.jcraft:jsch:0.1.55'
    implementation 'org.apache.commons:commons-csv:1.8'
    implementation 'com.google.guava:guava:29.0-jre'
    implementation 'redis.clients:jedis:2.9.0'
    implementation 'org.nanohttpd:nanohttpd:2.3.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2'
    // logging
    implementation 'org.slf4j:slf4j-api:1.7.26'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
    runtime 'ch.qos.logback:logback-classic:1.2.3'

    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0'
    // junit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-migrationsupport:5.6.2'
    // you can still use junit 4 (eg: migrations)
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.6.2'
    testCompileOnly 'junit:junit:4.12'

    // scala
    compile 'org.scala-lang:scala-library:2.11.12'
    testCompile 'org.scalatest:scalatest_2.11:3.0.5'
    testRuntime 'org.scala-lang.modules:scala-xml_2.11:1.1.0'
}

// Output to build/libs/shadow.jar
shadowJar {
    baseName = 'shadow'
    classifier = null
    version = null
}

//task wrapper(type: Wrapper) {
//    gradleVersion = "4.10.2"
//}

test {
    useJUnitPlatform()
    systemProperties = [
        // This seed works with "MethodOrderer.Random"
        'junit.jupiter.execution.order.random.seed': 99
    ]
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    maxParallelForks 4
    filter {
        // To ignore tests that have spaces in their names, just use spaces.
        excludeTest 'HelloWorldTest', 'hello world'
        excludeTest 'MyScalaSpec', "Basic logic* Pretty cool"
        // To ignore all the tests in a class, pass "null" as the 2nd param
        // excludeTest 'MyScalaSpec', null
    }
}

pmd {
    ruleSetFiles = files("config/pmd/myRuleSet.xml")
}
